{"version":3,"sources":["components/dropzone.js"],"names":["dmx","Component","extends","initialData","file","files","lastError","attributes","accept","type","String","default","required","Boolean","message","thumbs","thumbsWidth","Number","thumbsHeight","methods","remove","id","this","_remove","reset","_reset","init","node","_clickHandler","bind","_dragoverHandler","_dragenterHandler","_dragleaveHandler","_dropHandler","_changeHandler","_resetHandler","_form","form","_cnt","render","_dropzoneElement","document","createElement","attr","setAttribute","name","value","classList","add","Object","defineProperties","willValidate","get","set","dmxExtraData","$node","Array","isArray","data","props","multiple","disabled","setCustomValidity","_messageElement","className","innerHTML","append","addEventListener","dom","replace","dmxExtraElements","push","performUpdate","updatedProps","has","_updateMessage","destroy","removeEventListener","_validate","validate","dirty","invalid","validity","valid","validationMessage","nextTick","dispatchEvent","length","_addItems","items","i","entry","webkitGetAsEntry","isFile","_addFile","getAsFile","isDirectory","_addDirectory","path","createReader","readEntries","entries","fullPath","_addFiles","_id","info","date","lastModified","Date","lastModifiedDate","toISOString","size","dataUrl","_createThumb","includes","_reader","FileReader","onload","result","readAsDataURL","index","findIndex","thumb","_thumb","URL","revokeObjectURL","_objectURL","splice","slice","style","width","height","title","createObjectURL","backgroundImage","event","preventDefault","stopPropagation","filename","textContent","filesize","_formatBytes","bytes","toFixed","click","target","dataTransfer"],"mappings":"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","file":"dmxDropzone.js","sourcesContent":["dmx.Component('dropzone', {\r\n\r\n  extends: 'form-element',\r\n\r\n  initialData: {\r\n    file: null,\r\n    files: [],\r\n    lastError: '',\r\n  },\r\n\r\n  attributes: {\r\n    accept: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    required: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    message: {\r\n      type: String,\r\n      default: 'Drop files here or click to browse.',\r\n    },\r\n\r\n    thumbs: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    thumbsWidth: {\r\n      type: Number,\r\n      default: 100,\r\n    },\r\n\r\n    thumbsHeight: {\r\n      type: Number,\r\n      default: 100,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    remove (id) {\r\n      this._remove(id);\r\n    },\r\n\r\n    reset () {\r\n      this._reset();\r\n    },\r\n  },\r\n\r\n  init (node) {\r\n    this._clickHandler = this._clickHandler.bind(this);\r\n    this._dragoverHandler = this._dragoverHandler.bind(this);\r\n    this._dragenterHandler = this._dragenterHandler.bind(this);\r\n    this._dragleaveHandler = this._dragleaveHandler.bind(this);\r\n    this._dropHandler = this._dropHandler.bind(this);\r\n    this._changeHandler = this._changeHandler.bind(this);\r\n    this._resetHandler = this._resetHandler.bind(this);\r\n\r\n    this._form = node.form;\r\n    this._cnt = 0;\r\n  },\r\n\r\n  render (node) {\r\n    this._dropzoneElement = document.createElement('div');\r\n    for (let attr of node.attributes) {\r\n      this._dropzoneElement.setAttribute(attr.name, attr.value);\r\n    }\r\n    this._dropzoneElement.classList.add('dmxDropzone');\r\n\r\n    Object.defineProperties(this._dropzoneElement, {\r\n      willValidate: {\r\n        get: () => true,\r\n        set: () => {},\r\n      },\r\n      files: {\r\n        get: () => {\r\n          const files = this._form.dmxExtraData[this.$node.name];\r\n          if (Array.isArray(files)) return files;\r\n          return files ? [files] : [];\r\n        },\r\n        set: () => {},\r\n      },\r\n      value: {\r\n        get: () => this.data.file || String(this.data.files),\r\n        set: () => {},\r\n      },\r\n    });\r\n\r\n    this._dropzoneElement.type = 'file';\r\n    this._dropzoneElement.required = this.props.required;\r\n    this._dropzoneElement.multiple = node.multiple;\r\n    this._dropzoneElement.accept = this.props.accept;\r\n    this._dropzoneElement.name = node.name;\r\n    this._dropzoneElement.disabled = node.disabled;\r\n    this._dropzoneElement.setCustomValidity = message => {\r\n      this.set('isinvalid', message != '');\r\n      this.set('validityMessage', message || '');\r\n    };\r\n    \r\n    this._messageElement = document.createElement('div');\r\n    this._messageElement.className = 'dmxDropzoneMessage';\r\n    this._messageElement.innerHTML = this.props.message;\r\n\r\n    this._dropzoneElement.append(this._messageElement);\r\n\r\n    this._dropzoneElement.addEventListener('click', this._clickHandler);\r\n    this._dropzoneElement.addEventListener('dragover', this._dragoverHandler);\r\n    this._dropzoneElement.addEventListener('dragenter', this._dragenterHandler);\r\n    this._dropzoneElement.addEventListener('dragleave', this._dragleaveHandler);\r\n    this._dropzoneElement.addEventListener('drop', this._dropHandler);\r\n\r\n    node.addEventListener('change', this._changeHandler);\r\n    node.accept = this.props.accept;\r\n    \r\n    dmx.dom.replace(node, this._dropzoneElement);\r\n\r\n    if (this._form) {\r\n      if (Array.isArray(this._form.dmxExtraElements)) {\r\n        this._form.dmxExtraElements.push(this._dropzoneElement);\r\n      }\r\n      this._form.addEventListener('reset', this._resetHandler);\r\n    }\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('accept')) {\r\n      this.$node.accept = this.props.accept;\r\n    }\r\n\r\n    if (updatedProps.has('message')) {\r\n      this._updateMessage();\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    this._dropzoneElement.removeEventListener('click', this._clickHandler);\r\n    this._dropzoneElement.removeEventListener('dragover', this._dragoverHandler);\r\n    this._dropzoneElement.removeEventListener('dragenter', this._dragenterHandler);\r\n    this._dropzoneElement.removeEventListener('dragleave', this._dragleaveHandler);\r\n    this._dropzoneElement.removeEventListener('drop', this._dropHandler);\r\n\r\n    this.$node.removeEventListener('change', this._changeHandler);\r\n\r\n    if (this._form) {\r\n      this._form.removeEventListener('reset', this._resetHandler);\r\n    }\r\n\r\n    dmx.dom.replace(this._dropzoneElement, this.$node);\r\n  },\r\n\r\n  _validate () {\r\n    dmx.validate(this._dropzoneElement);\r\n\r\n    if (this.$node.dirty) {\r\n      this.set({\r\n        invalid: !this.$node.validity.valid,\r\n        validationMessage: this.$node.validationMessage,\r\n      });\r\n    }\r\n  },\r\n\r\n  _reset () {\r\n    this._dropzoneElement.dirty = false;\r\n    this.$node.dirty = false;\r\n    this.set({\r\n      invalid: false,\r\n      validationMessage: '',\r\n    });\r\n    this._remove();\r\n    dmx.nextTick(() => this.dispatchEvent(\"updated\"));\r\n  },\r\n\r\n  _updateMessage () {\r\n    let message = this.props.message;\r\n\r\n    if (this.data.files.length) {\r\n      message += ` (${this.data.files.length} files)`;\r\n    } else if (this.data.file) {\r\n      message += ` (${this.data.file.name})`;\r\n    }\r\n\r\n    this._messageElement.innerHTML = message;\r\n  },\r\n\r\n  _addItems (items) {\r\n    for (let i = 0; i < items.length; i++) {\r\n      const entry = items[i].webkitGetAsEntry();\r\n\r\n      if (entry.isFile) {\r\n        this._addFile(items[i].getAsFile());\r\n      } else if (entry.isDirectory) {\r\n        this._addDirectory(entry);\r\n      }\r\n    }\r\n  },\r\n\r\n  _addDirectory (entry, path = '') {\r\n    const reader = entry.createReader();\r\n\r\n    reader.readEntries(entries => {\r\n      for (let i = 0; i < entries.length; i++) {\r\n        const entry = entries[i];\r\n\r\n        if (entry.isFile) {\r\n          entry.file(file => {\r\n            file.fullPath = path + file.name;\r\n            this._addFile(file);\r\n          });\r\n        } else if (entry.isDirectory) {\r\n          this._addDirectory(entry, path + entry.name + '/');\r\n        }\r\n      }\r\n    });\r\n  },\r\n\r\n  _addFiles (files) {\r\n    for (let i = 0; i < files.length; i++) {\r\n      this._addFile(files[i]);\r\n    }\r\n  },\r\n\r\n  _addFile (file) {\r\n    if (this.$node.multiple) {\r\n      this._form.dmxExtraData[this.$node.name] = this._form.dmxExtraData[this.$node.name] || [];\r\n      this._form.dmxExtraData[this.$node.name].push(file);\r\n    } else {\r\n      this._remove();\r\n      this._form.dmxExtraData[this.$node.name] = file;\r\n    }\r\n\r\n    file._id = ++this._cnt;\r\n\r\n    const info = {\r\n      id: file._id,\r\n      date: (file.lastModified ? new Date(file.lastModified) : file.lastModifiedDate).toISOString(),\r\n      name: file.name,\r\n      size: file.size,\r\n      type: file.type,\r\n      dataUrl: null,\r\n    };\r\n\r\n    if (this.props.thumbs) {\r\n      this._createThumb(file);\r\n    }\r\n    \r\n    if (file.type.includes('image/') && !file._reader) {\r\n      file._reader = new FileReader();\r\n\r\n      file._reader.onload = () => {\r\n        info.dataUrl = file._reader.result;\r\n        if (this.$node.multiple) {\r\n          this.set('files', [...this.data.files]);\r\n        } else {\r\n          this.set('file', {...info});\r\n        }\r\n      };\r\n\r\n      file._reader.readAsDataURL(file);\r\n    }\r\n\r\n    if (this.$node.multiple) {\r\n      this.set('files', [...this.data.files, info]);\r\n    } else {\r\n      this.set('file', info);\r\n    }\r\n\r\n    if (this._dropzoneElement.dirty) {\r\n      this._validate();\r\n    }\r\n  },\r\n\r\n  _remove (id) {\r\n    if (this.$node.multiple) {\r\n      if (!id) {\r\n        if (Array.isArray(this._form.dmxExtraData[this.$node.name])) {\r\n          for (let file of this._form.dmxExtraData[this.$node.name]) {\r\n            const thumb = file._thumb;\r\n            if (thumb) {\r\n              thumb.remove();\r\n              URL.revokeObjectURL(thumb._objectURL);\r\n            }\r\n          }\r\n        }\r\n        delete this._form.dmxExtraData[this.$node.name];\r\n        this.set('files', []);\r\n    } else {\r\n        const index = this.data.files.findIndex(file => file.id == id);\r\n\r\n        if (index != -1) {\r\n          const thumb = this._form.dmxExtraData[this.$node.name][index]._thumb;\r\n          if (thumb) {\r\n            thumb.remove();\r\n            URL.revokeObjectURL(thumb._objectURL);\r\n          }\r\n          this._form.dmxExtraData[this.$node.name].splice(index, 1);\r\n          this.set('files', [...this.data.files.slice(0, index), ...this.data.files.slice(index + 1)]);\r\n        }\r\n      }\r\n    } else if (this.data.file) {\r\n      const thumb = this._form.dmxExtraData[this.$node.name]._thumb;\r\n      if (thumb) {\r\n        thumb.remove();\r\n        URL.revokeObjectURL(thumb._objectURL);\r\n      }\r\n      delete this._form.dmxExtraData[this.$node.name];\r\n      this.set('file', null);\r\n    }\r\n\r\n    if (this._dropzoneElement.dirty) {\r\n      this._validate();\r\n    }\r\n  },\r\n\r\n  _createThumb (file) {\r\n    const thumb = document.createElement('div');\r\n    thumb.id = 'dmxDropzoneThumb' + file._id;\r\n    thumb.className = 'dmxDropzoneThumb';\r\n    thumb.style.width = this.props.thumbsWidth + 'px';\r\n    thumb.style.height = this.props.thumbsHeight + 'px';\r\n    thumb.title = file.name;\r\n    thumb._objectURL = URL.createObjectURL(file);\r\n    thumb.style.backgroundImage = `url(${thumb._objectURL})`;\r\n    thumb.addEventListener('click', event => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this._remove(file._id);\r\n    });\r\n\r\n    const filename = document.createElement('div');\r\n    filename.className = 'dmxDropzoneFilename';\r\n    filename.textContent = file.name;\r\n    thumb.append(filename);\r\n\r\n    const filesize = document.createElement('div');\r\n    filesize.className = 'dmxDropzoneFilesize';\r\n    filesize.textContent = this._formatBytes(file.size);\r\n    thumb.append(filesize);\r\n\r\n    file._thumb = thumb;\r\n\r\n    this._dropzoneElement.append(thumb);\r\n  },\r\n\r\n  _formatBytes (bytes) {\r\n    const units = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n    let i = 0;\r\n\r\n    while (bytes >= 1000) {\r\n      bytes /= 1000;\r\n      i++;\r\n    }\r\n\r\n    return bytes.toFixed(1) + units[i];\r\n  },\r\n\r\n  _clickHandler (event) {\r\n    this.$node.click();\r\n  },\r\n\r\n  _changeHandler (event) {\r\n    this._addFiles(event.target.files);\r\n    this.$node.value = '';\r\n    this.$node.type = '';\r\n    this.$node.type = 'file';\r\n    if (event) this.dispatchEvent('changed');\r\n    dmx.nextTick(() => this.dispatchEvent(\"updated\"));\r\n  },\r\n\r\n  _dragoverHandler (event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  },\r\n\r\n  _dragenterHandler (event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    this._dropzoneElement.classList.add('dmxDropzoneHover');\r\n  },\r\n\r\n  _dragleaveHandler (event) {\r\n    this._dropzoneElement.classList.remove('dmxDropzoneHover');\r\n  },\r\n\r\n  _dropHandler (event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    this._dropzoneElement.classList.remove('dmxDropzoneHover');\r\n\r\n    if (!event.dataTransfer.files.length) {\r\n      return;\r\n    }\r\n\r\n    if (event.dataTransfer.items.length && event.dataTransfer.items[0].webkitGetAsEntry) {\r\n      this._addItems(event.dataTransfer.items);\r\n    } else {\r\n      this._addFiles(event.dataTransfer.files);\r\n    }\r\n\r\n    this.dispatchEvent('change');\r\n  },\r\n\r\n  _resetHandler (event) {\r\n    this._reset();\r\n    this.dispatchEvent('changed');\r\n  },\r\n\r\n});\r\n"]}